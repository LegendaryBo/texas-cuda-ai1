package pl.wroc.uni.ii.evolution.engine.operators.spacespecific.knaryvector.binaryvector;

import pl.wroc.uni.ii.evolution.engine.EvPopulation;
import pl.wroc.uni.ii.evolution.engine.individuals.EvBinaryVectorIndividual;
import pl.wroc.uni.ii.evolution.engine.operators.general.statistic.bayesian.EvBayesianNetworkStatistic;
import pl.wroc.uni.ii.evolution.engine.operators.general.statistic.persistency.EvPersistentStatisticStorage;
import pl.wroc.uni.ii.evolution.engine.operators.spacespecific.knaryvector.binaryvector.boa.bayesnetwork.EvBayesianNetwork;
import pl.wroc.uni.ii.evolution.engine.operators.spacespecific.knaryvector.binaryvector.boa.metrics.EvBoaStrategy;
import pl.wroc.uni.ii.evolution.engine.prototype.EvOperator;
import pl.wroc.uni.ii.evolution.engine.prototype.operators.EvBayesianOperator;

/**
 * sBOA operator (simple bayesian optimization algorithm) developed by Illegal
 * (Illinois Genetic Algorithms Laboratory).
 * 
 * 
 * @author Marcin Golebiowski (xormus@gmail.com)
 *
 */
public class EvBinaryVectorBOAOperator 
    implements EvOperator<EvBinaryVectorIndividual>, EvBayesianOperator {


  /**
   * number of genes of individuals on which the operator works on.
   */
  private int number_of_variables;

  
  /**
   * number of individuals generated by the bayesian network.
   */
  private int children_size;

  
  /**
   * maximum number of parent in the bayesian network.
   * (this should be set due to the performance issues)
   */
  private int max_parents;
  
  /**
   * Storage object used to store state of the bayesian network
   * during every iteration.
   * If it is set to null, no stats are stored.
   */
  private EvPersistentStatisticStorage storage = null;
 
  /**
   * Creates operator that works on individuals with 'num_of_variables' genes
   * and bayesian network with max_number_of_parents of each vertex.
   * 
   * @param num_of_variables - number of genes of individuals on which the 
   * operator works on
   * @param max_number_of_parents - aximum number of parent in the bayesian 
   * network.
   * @param child_size - number of individuals generates by the operator
   * during each iteration
   */
  public EvBinaryVectorBOAOperator(final int num_of_variables, 
      final int max_number_of_parents, final int child_size) {
    this.number_of_variables = num_of_variables;
    this.children_size = child_size;
    this.max_parents = max_number_of_parents;
  }

  
  /**
   * {@inheritDoc}
   */
  public EvPopulation<EvBinaryVectorIndividual> apply(
      final EvPopulation<EvBinaryVectorIndividual> population) {

    EvBayesianNetwork network = 
      new EvBayesianNetwork(number_of_variables, max_parents);

    EvBoaStrategy strategy = new EvBoaStrategy();

    strategy.init(population.size() + 1, max_parents);
    strategy.model(population, network);

    
    // storing bayesian network statistics if storage object is set
    if (storage != null) {
      EvBayesianNetworkStatistic stat = 
        new EvBayesianNetworkStatistic(
            network.getEdges(), number_of_variables);
      storage.saveStatistic(stat);
    }
    
    
    EvBinaryVectorIndividual[] array = population.toArray(
        new EvBinaryVectorIndividual[population.size()]);
    
    EvPopulation<EvBinaryVectorIndividual> result = 
      new EvPopulation<EvBinaryVectorIndividual>(
          network.generate(array, children_size));
    
    return result;
  }


  
  /**
   * {@inheritDoc}
   */
  public void collectBayesianStats(
      final EvPersistentStatisticStorage stor) {
    storage = stor;
  }

  
}
